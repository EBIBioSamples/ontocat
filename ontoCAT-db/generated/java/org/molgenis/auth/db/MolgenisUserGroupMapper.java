/* File:        org.molgenis.auth/model/MolgenisUserGroup.java
 * Copyright:   GBIC 2000-2,010, all rights reserved
 * Date:        February 24, 2010
 * Template:	MultiqueryMapperGen.java.ftl
 * generator:   org.molgenis.generators.db.MultiqueryMapperGen 3.3.2-testing
 *
 * Using "subclass per table" strategy
 *
 * THIS FILE HAS BEEN GENERATED, PLEASE DO NOT EDIT!
 */

package org.molgenis.auth.db;

import java.io.File;
import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.ArrayList;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import org.apache.commons.lang.StringEscapeUtils;
import org.apache.log4j.Logger;

import org.molgenis.framework.db.Database;
import org.molgenis.framework.db.QueryRule;
import org.molgenis.framework.db.QueryRule.Operator;
import org.molgenis.framework.db.DatabaseException;
import org.molgenis.framework.db.jdbc.JDBCConnectionHelper;
import org.molgenis.framework.db.jdbc.AbstractJDBCMapper;
import org.molgenis.framework.db.jdbc.JDBCMapper;
import org.molgenis.framework.db.jdbc.ColumnInfo.Type;


import org.molgenis.framework.db.jdbc.JDBCDatabase;
import org.molgenis.framework.db.QueryRule;
import org.molgenis.util.ValueLabel;
import org.molgenis.auth.MolgenisUserGroup;

import org.molgenis.auth.MolgenisUser;
import org.molgenis.auth.MolgenisUserGroup_members;
import org.molgenis.auth.MolgenisEntityMetaData;
import org.molgenis.auth.MolgenisUserGroup_canRead;
import org.molgenis.auth.MolgenisEntityMetaData;
import org.molgenis.auth.MolgenisUserGroup_canWrite;

public class MolgenisUserGroupMapper extends AbstractJDBCMapper<MolgenisUserGroup>
{	
	Logger logger = Logger.getLogger(this.getClass());
	
	
	public MolgenisUserGroupMapper(JDBCDatabase database)
	{
		super(database);
	}
	
	
	@Override
	public JDBCMapper<MolgenisUserGroup> getSuperTypeMapper()
	{
		//MolgenisUserGroup has no superclass
		return null;
	}	
	
	public List<MolgenisUserGroup> createList(int size)
	{
		return new ArrayList<MolgenisUserGroup>(size); 
	}			

	public MolgenisUserGroup create()
	{
		return new MolgenisUserGroup();
	}
	
	public String createFindSql(QueryRule ... rules) throws DatabaseException
	{	
		return "SELECT MolgenisUserGroup.id"
			  +", MolgenisUserGroup.name"
			  +", MolgenisUserGroup.superuser"
			  +" FROM MolgenisUserGroup "
;
	}	

	public String createCountSql(QueryRule ... rules) throws DatabaseException
	{	
		return "select count(*) as num_rows " 
			  +" FROM MolgenisUserGroup ";
	}
	
	@Override
	public String getTableFieldName(String fieldName)
	{
		if("id".equalsIgnoreCase(fieldName)) return "MolgenisUserGroup.id";
		if("name".equalsIgnoreCase(fieldName)) return "MolgenisUserGroup.name";
		if("superuser".equalsIgnoreCase(fieldName)) return "MolgenisUserGroup.superuser";
		return fieldName;
	}
	
	@Override
	public Type getFieldType(String fieldName)
	{
		if("id".equalsIgnoreCase(fieldName) || "molgenisUserGroup.id".equalsIgnoreCase(fieldName)) return Type.INT;
		if("name".equalsIgnoreCase(fieldName) || "molgenisUserGroup.name".equalsIgnoreCase(fieldName)) return Type.STRING;
		if("superuser".equalsIgnoreCase(fieldName) || "molgenisUserGroup.superuser".equalsIgnoreCase(fieldName)) return Type.BOOL;
		return Type.STRING;
	}		
	
	@Override
	public void resolveForeignKeys(List<MolgenisUserGroup> entities)  throws DatabaseException, ParseException
	{
	}	
	
	public void setAutogeneratedKey(int i, MolgenisUserGroup entity)
	{
		entity.setId(i);
	}
	
	@Override
	public QueryRule rewriteMrefRule(Database db, QueryRule rule) throws DatabaseException
	{
		if("members".equalsIgnoreCase(rule.getField()))
		{
			// replace with id filter based on the many-to-many links in
			// MolgenisUserGroup_members
			List<MolgenisUserGroup_members> mref_mapping_entities = db.find(MolgenisUserGroup_members.class, new QueryRule(
					"members", rule.getOperator(), rule.getValue()));
			if (mref_mapping_entities.size() > 0)
			{
				List<Integer> mref_ids = new ArrayList<Integer>();
				for (MolgenisUserGroup_members mref : mref_mapping_entities) mref_ids.add(mref.getMolgenisUserGroup());
				return new QueryRule("id", Operator.IN, mref_ids);
			}		
			else
			{
				// no records to be shown
				return new QueryRule("id", Operator.EQUALS, Integer.MIN_VALUE);
			}			
		}
		else if("members_name".equalsIgnoreCase(rule.getField()))
		{
			// replace with id filter based on the many-to-many links in
			// MolgenisUserGroup_members
			List<MolgenisUserGroup_members> mref_mapping_entities = db.find(MolgenisUserGroup_members.class, new QueryRule(
					"MolgenisUser_name", rule.getOperator(), rule.getValue()));
			if (mref_mapping_entities.size() > 0)
			{
				List<Integer> mref_ids = new ArrayList<Integer>();
				for (MolgenisUserGroup_members mref : mref_mapping_entities) mref_ids.add(mref.getMolgenisUserGroup());
				return new QueryRule("id", Operator.IN, mref_ids);
			}		
			else
			{
				// no records to be shown
				return new QueryRule("id", Operator.EQUALS, Integer.MIN_VALUE);
			}
		}
		else if("canRead".equalsIgnoreCase(rule.getField()))
		{
			// replace with id filter based on the many-to-many links in
			// MolgenisUserGroup_canRead
			List<MolgenisUserGroup_canRead> mref_mapping_entities = db.find(MolgenisUserGroup_canRead.class, new QueryRule(
					"canRead", rule.getOperator(), rule.getValue()));
			if (mref_mapping_entities.size() > 0)
			{
				List<Integer> mref_ids = new ArrayList<Integer>();
				for (MolgenisUserGroup_canRead mref : mref_mapping_entities) mref_ids.add(mref.getMolgenisUserGroup());
				return new QueryRule("id", Operator.IN, mref_ids);
			}		
			else
			{
				// no records to be shown
				return new QueryRule("id", Operator.EQUALS, Integer.MIN_VALUE);
			}			
		}
		else if("canRead_name".equalsIgnoreCase(rule.getField()))
		{
			// replace with id filter based on the many-to-many links in
			// MolgenisUserGroup_canRead
			List<MolgenisUserGroup_canRead> mref_mapping_entities = db.find(MolgenisUserGroup_canRead.class, new QueryRule(
					"MolgenisEntityMetaData_name", rule.getOperator(), rule.getValue()));
			if (mref_mapping_entities.size() > 0)
			{
				List<Integer> mref_ids = new ArrayList<Integer>();
				for (MolgenisUserGroup_canRead mref : mref_mapping_entities) mref_ids.add(mref.getMolgenisUserGroup());
				return new QueryRule("id", Operator.IN, mref_ids);
			}		
			else
			{
				// no records to be shown
				return new QueryRule("id", Operator.EQUALS, Integer.MIN_VALUE);
			}
		}
		else if("canWrite".equalsIgnoreCase(rule.getField()))
		{
			// replace with id filter based on the many-to-many links in
			// MolgenisUserGroup_canWrite
			List<MolgenisUserGroup_canWrite> mref_mapping_entities = db.find(MolgenisUserGroup_canWrite.class, new QueryRule(
					"canWrite", rule.getOperator(), rule.getValue()));
			if (mref_mapping_entities.size() > 0)
			{
				List<Integer> mref_ids = new ArrayList<Integer>();
				for (MolgenisUserGroup_canWrite mref : mref_mapping_entities) mref_ids.add(mref.getMolgenisUserGroup());
				return new QueryRule("id", Operator.IN, mref_ids);
			}		
			else
			{
				// no records to be shown
				return new QueryRule("id", Operator.EQUALS, Integer.MIN_VALUE);
			}			
		}
		else if("canWrite_name".equalsIgnoreCase(rule.getField()))
		{
			// replace with id filter based on the many-to-many links in
			// MolgenisUserGroup_canWrite
			List<MolgenisUserGroup_canWrite> mref_mapping_entities = db.find(MolgenisUserGroup_canWrite.class, new QueryRule(
					"MolgenisEntityMetaData_name", rule.getOperator(), rule.getValue()));
			if (mref_mapping_entities.size() > 0)
			{
				List<Integer> mref_ids = new ArrayList<Integer>();
				for (MolgenisUserGroup_canWrite mref : mref_mapping_entities) mref_ids.add(mref.getMolgenisUserGroup());
				return new QueryRule("id", Operator.IN, mref_ids);
			}		
			else
			{
				// no records to be shown
				return new QueryRule("id", Operator.EQUALS, Integer.MIN_VALUE);
			}
		}
		else
		{
			return rule;
		}
	}
	
	@Override
	public int executeAdd(List<MolgenisUserGroup> entities) throws SQLException, DatabaseException
	{	
		Connection conn = getDatabase().getConnection();
		//create big mysql query
		StringBuffer sql = new StringBuffer("INSERT INTO MolgenisUserGroup (name,superuser) VALUES ");
		{
			//vALUE WAS NULL
			boolean first = true;
			for(MolgenisUserGroup e: entities)
			{
				// put the ,
				if(first)
					first = false;
				else
					sql.append(",");
					
				sql.append("(");			
				//name
				if(e.getName() != null){
					sql.append("'"+StringEscapeUtils.escapeSql(e.getName().toString())+"'"
				+",");
				}
				else{
					sql.append("null,");
				}
				//superuser
				if(e.getSuperuser() != null){
					sql.append(e.getSuperuser()
				);
				}
				else{
					sql.append("null");
				}
				sql.append(")");
			}
		}		
		
		//execute sql
		Statement stmt = conn.createStatement();		
		try
		{			
			//logger.debug("created statement: "+sql.toString());
			int updatedRows = stmt.executeUpdate(sql.toString());
			getGeneratedKeys(entities, stmt, 0);
			return updatedRows;			
		}
		finally
		{
			JDBCDatabase.closeStatement(stmt);
		}
	}

	@Override
	public int executeUpdate(List<MolgenisUserGroup> entities) throws SQLException, DatabaseException
	{
		Connection conn = getDatabase().getConnection();
		
		//create sql string
		StringBuffer sql = new StringBuffer("INSERT INTO MolgenisUserGroup (id,name,superuser) VALUES ");		
		boolean first = true;
		for(MolgenisUserGroup e: entities)
		{
			// put the ,
			if(first)
				first = false;
			else
				sql.append(",");

			sql.append("(");
			
			//id
			if(e.getId() != null)
				sql.append("'"+StringEscapeUtils.escapeSql(e.getId().toString())+"'"+",");
			else
				sql.append("null,");				
		
			//name
			if(e.getName() != null)
				sql.append("'"+StringEscapeUtils.escapeSql(e.getName().toString())+"'"+",");
			else
				sql.append("null,");				
		
			//superuser
			if(e.getSuperuser() != null)
				sql.append(e.getSuperuser());
			else
				sql.append("null");				
		
			sql.append(")");
		}
		sql.append(" ON DUPLICATE KEY UPDATE id=LAST_INSERT_ID(id),name=VALUES(name),superuser=VALUES(superuser)");

		//execute sql
		Statement stmt = conn.createStatement();	
		try
		{
			return stmt.executeUpdate(sql.toString())/2;	
		}
		catch(SQLException sqlEx){
			logger.debug("Query that caused exception:" + sql.toString());
			throw sqlEx;
		}
		finally
		{
			JDBCDatabase.closeStatement(stmt);
		}		
	}

	@Override
	public int executeRemove(List<MolgenisUserGroup> entities) throws SQLException, DatabaseException
	{
		Connection conn = getDatabase().getConnection();
		
		//create sql
		StringBuffer sql = new StringBuffer("DELETE FROM MolgenisUserGroup WHERE ");
		
		//key $f_index: id
		{
			sql.append("id in (");
			boolean first = true;
			for(MolgenisUserGroup e: entities)
			{
				// put the ,
				if(first)
					first = false;
				else
					sql.append(",");			
				sql.append("'"+StringEscapeUtils.escapeSql(e.getId().toString())+"'");
			}				
			sql.append(") ");
		}
	
		//execute sql
		Statement stmt = conn.createStatement();
		try
		{	
			return stmt.executeUpdate(sql.toString());	
		}
		finally
		{
			JDBCDatabase.closeStatement(stmt);
		}		
	}

	public void prepareFileAttachements(List<MolgenisUserGroup> entities, File baseDir) throws IOException
	{
	}

	public boolean saveFileAttachements(List<MolgenisUserGroup> entities, File baseDir) throws IOException
	{
		return false;
	}	public void mapMrefs( List<MolgenisUserGroup> entities ) throws DatabaseException			
	{
		//FIXME: make efficient in batches

		//Field(entity=MolgenisUserGroup, name=members, type=mref[MolgenisUser->id], mref_name=MolgenisUserGroup_members, mref_localid=MolgenisUserGroup, mref_remoteid=members, xref_label=name, auto=false, nillable=false, readonly=false, default=)	
		{	
			for (int i = 0; i < entities.size(); i++)
			{
				MolgenisUserGroup entity = entities.get(i);
			
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "molgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_members> existing_mrefs = getDatabase().find( MolgenisUserGroup_members.class, rule );		
				//assign ids
				List<Integer> ids = new ArrayList<Integer>();
				List<String> labels = new ArrayList<String>();
				for(MolgenisUserGroup_members ref: existing_mrefs)
				{
					ids.add(ref.getMembers());
					labels.add(ref.getMembersLabel());
				}	
				entity.setMembers(ids);
				entity.setMembersLabels(labels);
				//put it back (grrr)
				entities.set(i,entity);				
			}
		}
		//Field(entity=MolgenisUserGroup, name=canRead, type=mref[MolgenisEntityMetaData->id], mref_name=MolgenisUserGroup_canRead, mref_localid=MolgenisUserGroup, mref_remoteid=canRead, xref_label=name, auto=false, nillable=false, readonly=false, default=)	
		{	
			for (int i = 0; i < entities.size(); i++)
			{
				MolgenisUserGroup entity = entities.get(i);
			
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "molgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_canRead> existing_mrefs = getDatabase().find( MolgenisUserGroup_canRead.class, rule );		
				//assign ids
				List<Integer> ids = new ArrayList<Integer>();
				List<String> labels = new ArrayList<String>();
				for(MolgenisUserGroup_canRead ref: existing_mrefs)
				{
					ids.add(ref.getCanRead());
					labels.add(ref.getCanReadLabel());
				}	
				entity.setCanRead(ids);
				entity.setCanReadLabels(labels);
				//put it back (grrr)
				entities.set(i,entity);				
			}
		}
		//Field(entity=MolgenisUserGroup, name=canWrite, type=mref[MolgenisEntityMetaData->id], mref_name=MolgenisUserGroup_canWrite, mref_localid=MolgenisUserGroup, mref_remoteid=canWrite, xref_label=name, auto=false, nillable=false, readonly=false, default=)	
		{	
			for (int i = 0; i < entities.size(); i++)
			{
				MolgenisUserGroup entity = entities.get(i);
			
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "molgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_canWrite> existing_mrefs = getDatabase().find( MolgenisUserGroup_canWrite.class, rule );		
				//assign ids
				List<Integer> ids = new ArrayList<Integer>();
				List<String> labels = new ArrayList<String>();
				for(MolgenisUserGroup_canWrite ref: existing_mrefs)
				{
					ids.add(ref.getCanWrite());
					labels.add(ref.getCanWriteLabel());
				}	
				entity.setCanWrite(ids);
				entity.setCanWriteLabels(labels);
				//put it back (grrr)
				entities.set(i,entity);				
			}
		}
	}		
			
	public void storeMrefs( List<MolgenisUserGroup> entities ) throws DatabaseException, IOException	
	{
		//FIXME: make efficient in batches
		{
			// what mrefs to add/delete
			List<MolgenisUserGroup_members> toDelete = new ArrayList<MolgenisUserGroup_members>();
			List<MolgenisUserGroup_members> toAdd = new ArrayList<MolgenisUserGroup_members>();

			for (MolgenisUserGroup entity : entities)
			{
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "MolgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_members> existing_mrefs = getDatabase().find( MolgenisUserGroup_members.class, rule );

				// check for removals
				List existing_ids = new ArrayList();
				for (MolgenisUserGroup_members ref : existing_mrefs)
				{
					existing_ids.add(ref.getMembers());
					if (!entity.getMembers().contains( ref.getMembers() ))
					{
						toDelete.add( ref );
					}
				}

				// check for additions
				for (Integer ref : entity.getMembers())
				{
					if(!existing_ids.contains(ref))
					{
						MolgenisUserGroup_members new_mref = new MolgenisUserGroup_members();
						new_mref.setMolgenisUserGroup( entity.getId() );
						new_mref.setMembers( ref );
						toAdd.add( new_mref );
					}
				}
			}

			// execute
			getDatabase().add( toAdd );
			getDatabase().remove( toDelete );
		}
		{
			// what mrefs to add/delete
			List<MolgenisUserGroup_canRead> toDelete = new ArrayList<MolgenisUserGroup_canRead>();
			List<MolgenisUserGroup_canRead> toAdd = new ArrayList<MolgenisUserGroup_canRead>();

			for (MolgenisUserGroup entity : entities)
			{
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "MolgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_canRead> existing_mrefs = getDatabase().find( MolgenisUserGroup_canRead.class, rule );

				// check for removals
				List existing_ids = new ArrayList();
				for (MolgenisUserGroup_canRead ref : existing_mrefs)
				{
					existing_ids.add(ref.getCanRead());
					if (!entity.getCanRead().contains( ref.getCanRead() ))
					{
						toDelete.add( ref );
					}
				}

				// check for additions
				for (Integer ref : entity.getCanRead())
				{
					if(!existing_ids.contains(ref))
					{
						MolgenisUserGroup_canRead new_mref = new MolgenisUserGroup_canRead();
						new_mref.setMolgenisUserGroup( entity.getId() );
						new_mref.setCanRead( ref );
						toAdd.add( new_mref );
					}
				}
			}

			// execute
			getDatabase().add( toAdd );
			getDatabase().remove( toDelete );
		}
		{
			// what mrefs to add/delete
			List<MolgenisUserGroup_canWrite> toDelete = new ArrayList<MolgenisUserGroup_canWrite>();
			List<MolgenisUserGroup_canWrite> toAdd = new ArrayList<MolgenisUserGroup_canWrite>();

			for (MolgenisUserGroup entity : entities)
			{
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "MolgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_canWrite> existing_mrefs = getDatabase().find( MolgenisUserGroup_canWrite.class, rule );

				// check for removals
				List existing_ids = new ArrayList();
				for (MolgenisUserGroup_canWrite ref : existing_mrefs)
				{
					existing_ids.add(ref.getCanWrite());
					if (!entity.getCanWrite().contains( ref.getCanWrite() ))
					{
						toDelete.add( ref );
					}
				}

				// check for additions
				for (Integer ref : entity.getCanWrite())
				{
					if(!existing_ids.contains(ref))
					{
						MolgenisUserGroup_canWrite new_mref = new MolgenisUserGroup_canWrite();
						new_mref.setMolgenisUserGroup( entity.getId() );
						new_mref.setCanWrite( ref );
						toAdd.add( new_mref );
					}
				}
			}

			// execute
			getDatabase().add( toAdd );
			getDatabase().remove( toDelete );
		}
	}	
	
	public void removeMrefs( List<MolgenisUserGroup> entities ) throws DatabaseException, IOException
	{
		{
			// what mrefs to add/delete
			List<MolgenisUserGroup_members> toDelete = new ArrayList<MolgenisUserGroup_members>();
					
			for (MolgenisUserGroup entity : entities)
			{
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "molgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_members> existing_mrefs = getDatabase().find( MolgenisUserGroup_members.class, rule );

				// check for removals
				for (MolgenisUserGroup_members ref : existing_mrefs)
				{
					toDelete.add( ref );
				}
			}

			// execute
			getDatabase().remove( toDelete );
		}
		{
			// what mrefs to add/delete
			List<MolgenisUserGroup_canRead> toDelete = new ArrayList<MolgenisUserGroup_canRead>();
					
			for (MolgenisUserGroup entity : entities)
			{
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "molgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_canRead> existing_mrefs = getDatabase().find( MolgenisUserGroup_canRead.class, rule );

				// check for removals
				for (MolgenisUserGroup_canRead ref : existing_mrefs)
				{
					toDelete.add( ref );
				}
			}

			// execute
			getDatabase().remove( toDelete );
		}
		{
			// what mrefs to add/delete
			List<MolgenisUserGroup_canWrite> toDelete = new ArrayList<MolgenisUserGroup_canWrite>();
					
			for (MolgenisUserGroup entity : entities)
			{
				//retrieve currently known mrefs
				QueryRule rule = new QueryRule( "molgenisUserGroup", QueryRule.Operator.EQUALS, entity.getId() );
				List<MolgenisUserGroup_canWrite> existing_mrefs = getDatabase().find( MolgenisUserGroup_canWrite.class, rule );

				// check for removals
				for (MolgenisUserGroup_canWrite ref : existing_mrefs)
				{
					toDelete.add( ref );
				}
			}

			// execute
			getDatabase().remove( toDelete );
		}
	}	}
